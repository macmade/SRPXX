/*******************************************************************************
 * The MIT License (MIT)
 * 
 * Copyright (c) 2024 Jean-David Gadina - www.xs-labs.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

#include <SRPXX.hpp>
#include <XSTest/XSTest.hpp>
#include "TestVectors.hpp"

struct Account
{
    const char * identity;
    const char * password;
};

static struct Account Accounts[] =
{
    { "milford@cubicle.org",        "nettles" },
    { "hubert@cumberdale.org",      "1234" },
    { "marjorie@stewartbaxter.org", "sunshinedust" },
    { "jeremy@fisher.org",          "kenneth" },
};

XSTest( SRP, EndToEnd )
{
    std::vector< SRP::HashAlgorithm >   algorithms = { SRP::HashAlgorithm::SHA1, SRP::HashAlgorithm::SHA224, SRP::HashAlgorithm::SHA256, SRP::HashAlgorithm::SHA384, SRP::HashAlgorithm::SHA512 };
    std::vector< SRP::Base::GroupType > groups     = { SRP::Base::GroupType::NG1024, SRP::Base::GroupType::NG1536, SRP::Base::GroupType::NG2048, SRP::Base::GroupType::NG3072, SRP::Base::GroupType::NG4096, SRP::Base::GroupType::NG6144, SRP::Base::GroupType::NG8192 };
    
    for( auto algorithm: algorithms )
    {
        for( auto group: groups )
        {
            for( size_t i = 0; i < sizeof( Accounts ) / sizeof( struct Account ); i++ )
            {
                // Server storage
                std::vector< uint8_t > salt;
                std::vector< uint8_t > verifier;
                
                /* Registration */
                {
                    SRP::Client client( Accounts[ i ].identity, algorithm, group );
                    
                    // User registers with a password
                    client.setPassword( Accounts[ i ].password );
                    
                    // Client generates a salt
                    client.setSalt( SRP::Random::bytes( 16 ) );
                    
                    // Client -> Server:
                    // Server receives salt and verifier from Client
                    salt     = client.salt();
                    verifier = client.v().bytes( SRP::BigNum::Endianness::BigEndian );
                }
                
                /* Authentication */
                {
                    SRP::Client client( Accounts[ i ].identity, algorithm, group );
                    SRP::Server server( Accounts[ i ].identity, algorithm, group );
                    
                    // Server has stored salt and verifier during authentication (see above)
                    server.setSalt( salt );
                    server.setV( SRP::BigNum( verifier, SRP::BigNum::Endianness::BigEndian ) );
                    
                    // Client -> Server:
                    // Server receives A from Client
                    server.setA( client.A() );
                    
                    // Server -> Client:
                    // Client receives B and salt from Server
                    client.setB( server.B() );
                    client.setSalt( server.salt() );
                    
                    // User inputs a wrong password
                    client.setPassword( "salad" );
                    
                    // Client and Server will not have matching M1 and M2, meaning the authentication failed
                    XSTestAssertFalse( client.M1() == server.M1() );
                    XSTestAssertFalse( client.M2() == server.M2() );
                    
                    // User inputs the correct password
                    client.setPassword( Accounts[ i ].password );
                    
                    // With the correct password, Client and Server will have matching M1 and M2, meaning the authentication was successful
                    XSTestAssertTrue( client.M1() == server.M1() );
                    XSTestAssertTrue( client.M2() == server.M2() );
                }
            }
        }
    }
}

XSTest( SRP, RFC )
{
    /* Test Vectors from RFC-5054 */
    TestVectors rfc
    (
        SRP::HashAlgorithm::SHA1,
        SRP::Base::GroupType::NG1024,
        "alice",
        "password123",
        {
            /* Salt */
            0xBE, 0xB2, 0x53, 0x79, 0xD1, 0xA8, 0x58, 0x1E, 0xB5, 0xA7, 0x27, 0x67, 0x3A, 0x24, 0x41, 0xEE
        },
        {
            /* Verifier */
            0x7E, 0x27, 0x3D, 0xE8, 0x69, 0x6F, 0xFC, 0x4F, 0x4E, 0x33, 0x7D, 0x05, 0xB4, 0xB3, 0x75, 0xBE, 0xB0, 0xDD, 0xE1, 0x56, 0x9E, 0x8F, 0xA0, 0x0A, 0x98, 0x86, 0xD8, 0x12,
            0x9B, 0xAD, 0xA1, 0xF1, 0x82, 0x22, 0x23, 0xCA, 0x1A, 0x60, 0x5B, 0x53, 0x0E, 0x37, 0x9B, 0xA4, 0x72, 0x9F, 0xDC, 0x59, 0xF1, 0x05, 0xB4, 0x78, 0x7E, 0x51, 0x86, 0xF5,
            0xC6, 0x71, 0x08, 0x5A, 0x14, 0x47, 0xB5, 0x2A, 0x48, 0xCF, 0x19, 0x70, 0xB4, 0xFB, 0x6F, 0x84, 0x00, 0xBB, 0xF4, 0xCE, 0xBF, 0xBB, 0x16, 0x81, 0x52, 0xE0, 0x8A, 0xB5,
            0xEA, 0x53, 0xD1, 0x5C, 0x1A, 0xFF, 0x87, 0xB2, 0xB9, 0xDA, 0x6E, 0x04, 0xE0, 0x58, 0xAD, 0x51, 0xCC, 0x72, 0xBF, 0xC9, 0x03, 0x3B, 0x56, 0x4E, 0x26, 0x48, 0x0D, 0x78,
            0xE9, 0x55, 0xA5, 0xE2, 0x9E, 0x7A, 0xB2, 0x45, 0xDB, 0x2B, 0xE3, 0x15, 0xE2, 0x09, 0x9A, 0xFB
        },
        {
            /* a */
            0x60, 0x97, 0x55, 0x27, 0x03, 0x5C, 0xF2, 0xAD, 0x19, 0x89, 0x80, 0x6F, 0x04, 0x07, 0x21, 0x0B, 0xC8, 0x1E, 0xDC, 0x04, 0xE2, 0x76, 0x2A, 0x56, 0xAF, 0xD5, 0x29, 0xDD,
            0xDA, 0x2D, 0x43, 0x93
        },
        {
            /* A */
            0x61, 0xD5, 0xE4, 0x90, 0xF6, 0xF1, 0xB7, 0x95, 0x47, 0xB0, 0x70, 0x4C, 0x43, 0x6F, 0x52, 0x3D, 0xD0, 0xE5, 0x60, 0xF0, 0xC6, 0x41, 0x15, 0xBB, 0x72, 0x55, 0x7E, 0xC4,
            0x43, 0x52, 0xE8, 0x90, 0x32, 0x11, 0xC0, 0x46, 0x92, 0x27, 0x2D, 0x8B, 0x2D, 0x1A, 0x53, 0x58, 0xA2, 0xCF, 0x1B, 0x6E, 0x0B, 0xFC, 0xF9, 0x9F, 0x92, 0x15, 0x30, 0xEC,
            0x8E, 0x39, 0x35, 0x61, 0x79, 0xEA, 0xE4, 0x5E, 0x42, 0xBA, 0x92, 0xAE, 0xAC, 0xED, 0x82, 0x51, 0x71, 0xE1, 0xE8, 0xB9, 0xAF, 0x6D, 0x9C, 0x03, 0xE1, 0x32, 0x7F, 0x44,
            0xBE, 0x08, 0x7E, 0xF0, 0x65, 0x30, 0xE6, 0x9F, 0x66, 0x61, 0x52, 0x61, 0xEE, 0xF5, 0x40, 0x73, 0xCA, 0x11, 0xCF, 0x58, 0x58, 0xF0, 0xED, 0xFD, 0xFE, 0x15, 0xEF, 0xEA,
            0xB3, 0x49, 0xEF, 0x5D, 0x76, 0x98, 0x8A, 0x36, 0x72, 0xFA, 0xC4, 0x7B, 0x07, 0x69, 0x44, 0x7B
        },
        {
            /* b */
            0xE4, 0x87, 0xCB, 0x59, 0xD3, 0x1A, 0xC5, 0x50, 0x47, 0x1E, 0x81, 0xF0, 0x0F, 0x69, 0x28, 0xE0, 0x1D, 0xDA, 0x08, 0xE9, 0x74, 0xA0, 0x04, 0xF4, 0x9E, 0x61, 0xF5, 0xD1,
            0x05, 0x28, 0x4D, 0x20
        },
        {
            /* B */
            0xBD, 0x0C, 0x61, 0x51, 0x2C, 0x69, 0x2C, 0x0C, 0xB6, 0xD0, 0x41, 0xFA, 0x01, 0xBB, 0x15, 0x2D, 0x49, 0x16, 0xA1, 0xE7, 0x7A, 0xF4, 0x6A, 0xE1, 0x05, 0x39, 0x30, 0x11,
            0xBA, 0xF3, 0x89, 0x64, 0xDC, 0x46, 0xA0, 0x67, 0x0D, 0xD1, 0x25, 0xB9, 0x5A, 0x98, 0x16, 0x52, 0x23, 0x6F, 0x99, 0xD9, 0xB6, 0x81, 0xCB, 0xF8, 0x78, 0x37, 0xEC, 0x99,
            0x6C, 0x6D, 0xA0, 0x44, 0x53, 0x72, 0x86, 0x10, 0xD0, 0xC6, 0xDD, 0xB5, 0x8B, 0x31, 0x88, 0x85, 0xD7, 0xD8, 0x2C, 0x7F, 0x8D, 0xEB, 0x75, 0xCE, 0x7B, 0xD4, 0xFB, 0xAA,
            0x37, 0x08, 0x9E, 0x6F, 0x9C, 0x60, 0x59, 0xF3, 0x88, 0x83, 0x8E, 0x7A, 0x00, 0x03, 0x0B, 0x33, 0x1E, 0xB7, 0x68, 0x40, 0x91, 0x04, 0x40, 0xB1, 0xB2, 0x7A, 0xAE, 0xAE,
            0xEB, 0x40, 0x12, 0xB7, 0xD7, 0x66, 0x52, 0x38, 0xA8, 0xE3, 0xFB, 0x00, 0x4B, 0x11, 0x7B, 0x58
        },
        {
            /* u */
            0xCE, 0x38, 0xB9, 0x59, 0x34, 0x87, 0xDA, 0x98, 0x55, 0x4E, 0xD4, 0x7D, 0x70, 0xA7, 0xAE, 0x5F, 0x46, 0x2E, 0xF0, 0x19
        },
        {
            /* k */
            0x75, 0x56, 0xAA, 0x04, 0x5A, 0xEF, 0x2C, 0xDD, 0x07, 0xAB, 0xAF, 0x0F, 0x66, 0x5C, 0x3E, 0x81, 0x89, 0x13, 0x18, 0x6F
        },
        {
            /* S */
            0xB0, 0xDC, 0x82, 0xBA, 0xBC, 0xF3, 0x06, 0x74, 0xAE, 0x45, 0x0C, 0x02, 0x87, 0x74, 0x5E, 0x79, 0x90, 0xA3, 0x38, 0x1F, 0x63, 0xB3, 0x87, 0xAA, 0xF2, 0x71, 0xA1, 0x0D,
            0x23, 0x38, 0x61, 0xE3, 0x59, 0xB4, 0x82, 0x20, 0xF7, 0xC4, 0x69, 0x3C, 0x9A, 0xE1, 0x2B, 0x0A, 0x6F, 0x67, 0x80, 0x9F, 0x08, 0x76, 0xE2, 0xD0, 0x13, 0x80, 0x0D, 0x6C,
            0x41, 0xBB, 0x59, 0xB6, 0xD5, 0x97, 0x9B, 0x5C, 0x00, 0xA1, 0x72, 0xB4, 0xA2, 0xA5, 0x90, 0x3A, 0x0B, 0xDC, 0xAF, 0x8A, 0x70, 0x95, 0x85, 0xEB, 0x2A, 0xFA, 0xFA, 0x8F,
            0x34, 0x99, 0xB2, 0x00, 0x21, 0x0D, 0xCC, 0x1F, 0x10, 0xEB, 0x33, 0x94, 0x3C, 0xD6, 0x7F, 0xC8, 0x8A, 0x2F, 0x39, 0xA4, 0xBE, 0x5B, 0xEC, 0x4E, 0xC0, 0xA3, 0x21, 0x2D,
            0xC3, 0x46, 0xD7, 0xE4, 0x74, 0xB2, 0x9E, 0xDE, 0x8A, 0x46, 0x9F, 0xFE, 0xCA, 0x68, 0x6E, 0x5A
        },
        {
            /* x */
            0x94, 0xB7, 0x55, 0x5A, 0xAB, 0xE9, 0x12, 0x7C, 0xC5, 0x8C, 0xCF, 0x49, 0x93, 0xDB, 0x6C, 0xF8, 0x4D, 0x16, 0xC1, 0x24
        },
        {}, /* K  - No tested in RFC */
        {}, /* M1 - No tested in RFC */
        {}  /* M2 - No tested in RFC */
    );
    
    {
        SRP::Client client( rfc.identity(), rfc.hashAlgorithm(), rfc.groupType(), rfc.a() );
        
        client.setPassword( rfc.password() );
        client.setSalt( rfc.salt() );
        client.setB( rfc.B() );
        
        XSTestAssertTrue( client.v() == rfc.v() );
        XSTestAssertTrue( client.a() == rfc.a() );
        XSTestAssertTrue( client.A() == rfc.A() );
        XSTestAssertTrue( client.u() == rfc.u() );
        XSTestAssertTrue( client.k() == rfc.k() );
        XSTestAssertTrue( client.S() == rfc.S() );
        XSTestAssertTrue( client.x() == rfc.x() );
    }
    
    {
        SRP::Server server( rfc.identity(), rfc.hashAlgorithm(), rfc.groupType(), rfc.b() );
        
        server.setV( rfc.v() );
        server.setSalt( rfc.salt() );
        server.setA( rfc.A() );
        
        XSTestAssertTrue( server.v() == rfc.v() );
        XSTestAssertTrue( server.b() == rfc.b() );
        XSTestAssertTrue( server.B() == rfc.B() );
        XSTestAssertTrue( server.u() == rfc.u() );
        XSTestAssertTrue( server.k() == rfc.k() );
        XSTestAssertTrue( server.S() == rfc.S() );
    }
}
